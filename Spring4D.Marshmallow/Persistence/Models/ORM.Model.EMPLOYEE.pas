unit ORM.Model.EMPLOYEE;

interface

uses
  Spring,
  Spring.Collections,
  Spring.Persistence.Mapping.Attributes,
  ORM.Model.SALARY_HISTORY;

{$M+}

type
  [Entity]
  [Table('EMPLOYEE')]
  //  [Sequence('SELECT GEN_ID(EMP_NO_GEN, 1) FROM RDB$DATABASE')]
  TEmployee = class
  private
    FId: Integer;
    FFirstname: string;
    FLastname: string;
    FPhoneExt: string;
    FHireDate: TDateTime;
    FDepartmentId: string;
    FJobCode: string;
    FJobGrande: Integer;
    FJobCountry: string;
    FSalary: Double;
    FFullName: string;

    FSalaryHistory: Lazy<IList<TSalaryHistory>>;

    function GetSalaryHistory(): IList<TSalaryHistory>;
    procedure SetSalaryHistory(const Value: IList<TSalaryHistory>);
  public
    constructor Create;
    destructor Destroy; override;

    [OneToMany(False, [ckCascadeAll])]
    property SalaryHistory: IList<TSalaryHistory> read GetSalaryHistory write SetSalaryHistory;

    [AutoGenerated]
    [Column('EMP_NO', [cpRequired, cpPrimaryKey, cpNotNull])]
    property Id: Integer read FId write FId;

    [Column('FIRST_NAME')]
    property Firstname: string read FFirstname write FFirstname;

    [Column('LAST_NAME')]
    property Lastname: string read FLastname write FLastname;

    [Column('PHONE_EXT', [], 4)]
    property PhoneExt: string read FPhoneExt write FPhoneExt;

    [Column('HIRE_DATE')]
    property HireDate: TDateTime read FHireDate write FHireDate;

    [Column('DEPT_NO', [cpRequired], 3)]
    property DepartmentId: string read FDepartmentId write FDepartmentId;

    [Column('JOB_CODE', [cpRequired], 5)]
    property JobCode: string read FJobCode write FJobCode;

    [Column('JOB_GRADE', [cpRequired])]
    property JobGrande: Integer read FJobGrande write FJobGrande;

    [Column('JOB_COUNTRY', [cpRequired], 15)]
    property JobCountry: string read FJobCountry write FJobCountry;

    [Column('SALARY', [], 10, 0, 2)]
    property Salary: Double read FSalary write FSalary;
  end;

{$M-}

implementation

{ TEmployee }

constructor TEmployee.Create;
begin
  inherited Create;
  FSalaryHistory := TCollections.CreateObjectList<TSalaryHistory>;
end;

destructor TEmployee.Destroy;
begin
  //...
  inherited;
end;

function TEmployee.GetSalaryHistory: IList<TSalaryHistory>;
begin
  Result := FSalaryHistory;
end;

procedure TEmployee.SetSalaryHistory(const Value: IList<TSalaryHistory>);
begin
  FSalaryHistory := Value;
end;

end.
